#include <stdlib.h>
#include <iostream>
#include <math.h>

#include "dynamixel_helper.h"

double* draw_x(double phase)
{
    double *angles = new double[5];

    angles[0] = -0.051053228663951 * exp(-pow(phase - 1.0, 2) / (2 * pow(0.04, 2))) +
                0.0008543981376347839 * exp(-pow(phase - 0.9583333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.05330098486006142 * exp(-pow(phase - 0.9166666666666666, 2) / (2 * pow(0.04, 2))) +
                0.02025362495152804 * exp(-pow(phase - 0.875, 2) / (2 * pow(0.04, 2))) +
                -0.10517676856630319 * exp(-pow(phase - 0.8333333333333333, 2) / (2 * pow(0.04, 2))) +
                0.10737066855881901 * exp(-pow(phase - 0.7916666666666666, 2) / (2 * pow(0.04, 2))) +
                0.014172819456309174 * exp(-pow(phase - 0.75, 2) / (2 * pow(0.04, 2))) +
                -0.11317512664394334 * exp(-pow(phase - 0.7083333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.03767593988727028 * exp(-pow(phase - 0.6666666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.07804478693431517 * exp(-pow(phase - 0.625, 2) / (2 * pow(0.04, 2))) +
                -0.17922125272467648 * exp(-pow(phase - 0.5833333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.16221998532998885 * exp(-pow(phase - 0.5416666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.10859697992216803 * exp(-pow(phase - 0.5, 2) / (2 * pow(0.04, 2))) +
                -0.2070343603724118 * exp(-pow(phase - 0.4583333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.22084787070650364 * exp(-pow(phase - 0.41666666666666663, 2) / (2 * pow(0.04, 2))) +
                -0.1083901082222736 * exp(-pow(phase - 0.375, 2) / (2 * pow(0.04, 2))) +
                -0.05512243994786115 * exp(-pow(phase - 0.3333333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.028450215608287373 * exp(-pow(phase - 0.29166666666666663, 2) / (2 * pow(0.04, 2))) +
                -0.137576880221506 * exp(-pow(phase - 0.25, 2) / (2 * pow(0.04, 2))) +
                0.06421245302365414 * exp(-pow(phase - 0.20833333333333331, 2) / (2 * pow(0.04, 2))) +
                -0.1007380640952369 * exp(-pow(phase - 0.16666666666666666, 2) / (2 * pow(0.04, 2))) +
                0.031031177117644856 * exp(-pow(phase - 0.125, 2) / (2 * pow(0.04, 2))) +
                -0.06838542843956259 * exp(-pow(phase - 0.08333333333333333, 2) / (2 * pow(0.04, 2))) +
                0.013597978009560505 * exp(-pow(phase - 0.041666666666666664, 2) / (2 * pow(0.04, 2))) +
                -0.05914475546272154 * exp(-pow(phase - 0.0, 2) / (2 * pow(0.04, 2))) +
                0.06263230117041728;

    angles[1] = 0.3844942287335815 * exp(-pow(phase - 1.0, 2) / (2 * pow(0.04, 2))) +
                0.017625762929082578 * exp(-pow(phase - 0.9583333333333333, 2) / (2 * pow(0.04, 2))) +
                0.3333131442158317 * exp(-pow(phase - 0.9166666666666666, 2) / (2 * pow(0.04, 2))) +
                0.04918229755228487 * exp(-pow(phase - 0.875, 2) / (2 * pow(0.04, 2))) +
                0.29823030992219257 * exp(-pow(phase - 0.8333333333333333, 2) / (2 * pow(0.04, 2))) +
                0.0970432304198876 * exp(-pow(phase - 0.7916666666666666, 2) / (2 * pow(0.04, 2))) +
                0.8479800974833231 * exp(-pow(phase - 0.75, 2) / (2 * pow(0.04, 2))) +
                0.9659364928404822 * exp(-pow(phase - 0.7083333333333333, 2) / (2 * pow(0.04, 2))) +
                1.1746986310841212 * exp(-pow(phase - 0.6666666666666666, 2) / (2 * pow(0.04, 2))) +
                0.996781041885964 * exp(-pow(phase - 0.625, 2) / (2 * pow(0.04, 2))) +
                1.2052112665966006 * exp(-pow(phase - 0.5833333333333333, 2) / (2 * pow(0.04, 2))) +
                1.2223498598620413 * exp(-pow(phase - 0.5416666666666666, 2) / (2 * pow(0.04, 2))) +
                1.11177831325073 * exp(-pow(phase - 0.5, 2) / (2 * pow(0.04, 2))) +
                0.9890888012434412 * exp(-pow(phase - 0.4583333333333333, 2) / (2 * pow(0.04, 2))) +
                1.224401501708584 * exp(-pow(phase - 0.41666666666666663, 2) / (2 * pow(0.04, 2))) +
                1.0500833345518537 * exp(-pow(phase - 0.375, 2) / (2 * pow(0.04, 2))) +
                1.2039017524217108 * exp(-pow(phase - 0.3333333333333333, 2) / (2 * pow(0.04, 2))) +
                1.1454227599144176 * exp(-pow(phase - 0.29166666666666663, 2) / (2 * pow(0.04, 2))) +
                1.2111220708283965 * exp(-pow(phase - 0.25, 2) / (2 * pow(0.04, 2))) +
                0.631938093503217 * exp(-pow(phase - 0.20833333333333331, 2) / (2 * pow(0.04, 2))) +
                0.8428821803607671 * exp(-pow(phase - 0.16666666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.3740479718094787 * exp(-pow(phase - 0.125, 2) / (2 * pow(0.04, 2))) +
                0.5839241010723408 * exp(-pow(phase - 0.08333333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.12520354017220847 * exp(-pow(phase - 0.041666666666666664, 2) / (2 * pow(0.04, 2))) +
                0.4522891551011612 * exp(-pow(phase - 0.0, 2) / (2 * pow(0.04, 2))) +
                -2.35132272258669;

    angles[2] = -0.08230030603691452 * exp(-pow(phase - 1.0, 2) / (2 * pow(0.04, 2))) +
                -0.023577103960495505 * exp(-pow(phase - 0.9583333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.04956622402509825 * exp(-pow(phase - 0.9166666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.056161434894163476 * exp(-pow(phase - 0.875, 2) / (2 * pow(0.04, 2))) +
                -0.01418702995651211 * exp(-pow(phase - 0.8333333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.07739033676765339 * exp(-pow(phase - 0.7916666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.060556321072454455 * exp(-pow(phase - 0.75, 2) / (2 * pow(0.04, 2))) +
                -0.3717534985339175 * exp(-pow(phase - 0.7083333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.14650867047431304 * exp(-pow(phase - 0.6666666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.2870175866454878 * exp(-pow(phase - 0.625, 2) / (2 * pow(0.04, 2))) +
                -0.40865599707556055 * exp(-pow(phase - 0.5833333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.4663247163511899 * exp(-pow(phase - 0.5416666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.5100280055246575 * exp(-pow(phase - 0.5, 2) / (2 * pow(0.04, 2))) +
                -0.12466332408236336 * exp(-pow(phase - 0.4583333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.329856180227295 * exp(-pow(phase - 0.41666666666666663, 2) / (2 * pow(0.04, 2))) +
                -0.28359504535358737 * exp(-pow(phase - 0.375, 2) / (2 * pow(0.04, 2))) +
                -0.3977738419723198 * exp(-pow(phase - 0.3333333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.4819839884653804 * exp(-pow(phase - 0.29166666666666663, 2) / (2 * pow(0.04, 2))) +
                -0.29429583134948456 * exp(-pow(phase - 0.25, 2) / (2 * pow(0.04, 2))) +
                -0.30693446818735737 * exp(-pow(phase - 0.20833333333333331, 2) / (2 * pow(0.04, 2))) +
                -0.05182295785801516 * exp(-pow(phase - 0.16666666666666666, 2) / (2 * pow(0.04, 2))) +
                0.02389280908546776 * exp(-pow(phase - 0.125, 2) / (2 * pow(0.04, 2))) +
                -0.11589213164320133 * exp(-pow(phase - 0.08333333333333333, 2) / (2 * pow(0.04, 2))) +
                0.023194132071313933 * exp(-pow(phase - 0.041666666666666664, 2) / (2 * pow(0.04, 2))) +
                -0.10673030932614669 * exp(-pow(phase - 0.0, 2) / (2 * pow(0.04, 2))) +
                1.7482969159688246;

    angles[3] = -0.008151954781861814 * exp(-pow(phase - 1.0, 2) / (2 * pow(0.04, 2))) +
                0.07886543633061027 * exp(-pow(phase - 0.9583333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.07655468034910673 * exp(-pow(phase - 0.9166666666666666, 2) / (2 * pow(0.04, 2))) +
                0.12610682982746546 * exp(-pow(phase - 0.875, 2) / (2 * pow(0.04, 2))) +
                -0.059350620691006384 * exp(-pow(phase - 0.8333333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.012752682071588861 * exp(-pow(phase - 0.7916666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.657546161612192 * exp(-pow(phase - 0.75, 2) / (2 * pow(0.04, 2))) +
                -0.48711741375912654 * exp(-pow(phase - 0.7083333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.8443671105962636 * exp(-pow(phase - 0.6666666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.5512231798180687 * exp(-pow(phase - 0.625, 2) / (2 * pow(0.04, 2))) +
                -0.7144991304014809 * exp(-pow(phase - 0.5833333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.6301776429931907 * exp(-pow(phase - 0.5416666666666666, 2) / (2 * pow(0.04, 2))) +
                -0.5615215142159024 * exp(-pow(phase - 0.5, 2) / (2 * pow(0.04, 2))) +
                -0.7909037502861063 * exp(-pow(phase - 0.4583333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.7160971357700792 * exp(-pow(phase - 0.41666666666666663, 2) / (2 * pow(0.04, 2))) +
                -0.6813170406743135 * exp(-pow(phase - 0.375, 2) / (2 * pow(0.04, 2))) +
                -0.7488680739900494 * exp(-pow(phase - 0.3333333333333333, 2) / (2 * pow(0.04, 2))) +
                -0.4960719109078182 * exp(-pow(phase - 0.29166666666666663, 2) / (2 * pow(0.04, 2))) +
                -0.9601514337879331 * exp(-pow(phase - 0.25, 2) / (2 * pow(0.04, 2))) +
                -0.2942474900914611 * exp(-pow(phase - 0.20833333333333331, 2) / (2 * pow(0.04, 2))) +
                -0.6427590690262104 * exp(-pow(phase - 0.16666666666666666, 2) / (2 * pow(0.04, 2))) +
                0.3740269117228057 * exp(-pow(phase - 0.125, 2) / (2 * pow(0.04, 2))) +
                -0.11415318568341137 * exp(-pow(phase - 0.08333333333333333, 2) / (2 * pow(0.04, 2))) +
                0.04645426984162651 * exp(-pow(phase - 0.041666666666666664, 2) / (2 * pow(0.04, 2))) +
                0.025715143778653582 * exp(-pow(phase - 0.0, 2) / (2 * pow(0.04, 2))) +
                0.6151880032948251;

    angles[4] = 0.0;

    return angles;
}

int main() {
    
    // Initialize Dynamixel Helper
    const char port[] = "/dev/ttyUSB0";
    DynamixelHelper dynamixelHelper(port);

    // Motor information
    uint8_t motor_ids[]{1, 2, 4, 5, 6};
    size_t ids_size = sizeof(motor_ids) / sizeof(motor_ids[0]);
    double *present_positions;
    double *goal_positions;
    double moving_status_threshold = 20 * 0.088 * M_PI / 180.0;

    dynamixelHelper.openPort();
    dynamixelHelper.setBaudrate(1000000);
    dynamixelHelper.groupTorqueEnable(motor_ids, ids_size);

     double phase = 0.0;
     while(phase < 1.0)
     {
         goal_positions = draw_x(phase);

         dynamixelHelper.groupSetAngle(motor_ids, ids_size, goal_positions);

         bool still_moving = true;
         do
        {
             present_positions = dynamixelHelper.groupGetAngle(motor_ids, ids_size);

             for (int i = 0; i < (int)ids_size; i++)
             {
                 still_moving |= std::abs(goal_positions[i] - present_positions[i]) > moving_status_threshold;
             }
         }
         while (still_moving);

         phase += 0.001;
     }

    dynamixelHelper.groupTorqueDisable(motor_ids, ids_size);

    delete[] present_positions;
    delete[] goal_positions;

    return 0;
}
